import subprocess
import os
import sys
import glob
import yaml
import re 
from snakemake.io import expand
from snakemake.io import Wildcards

##### load paths #####
current_path=os.getcwd() 
path_folder_prefix=f"{current_path}/../../.."   # path_folder_prefix=f"/tarafs/scratch/proj5034-AGBKU/catfish" # =  ../../..
##### load specific paths #####
path_reads_prefix=f"{path_folder_prefix}/00-INPUTS/00-READS"
path_data_prefix=f"{path_folder_prefix}/00-INPUTS"
path_prog_prefix=f"{path_folder_prefix}/01-PROGRAMS"
path_exp_prefix=f"{path_folder_prefix}/02-EXPERIMENTS"
path_out_prefix=f"{path_folder_prefix}/03-OUTPUTS"
path_tmp_prefix=f"{path_folder_prefix}/04-TEMPORARY_FILES"  

##### setup config and report #####
threads = 12
configfile: f"{current_path}/config/config.yaml" #report: "report/workflow.rst"

##### Definition of functions


def get_unique_values(key):
    values = set()
    for species in config["samples"].values():
        for sample in species.values():
            value = sample.get(key)
            if value is not None:
                values.add(value)
    return list(values)

def get_unique_values_references(key):
    values = set()
    for sample in config["references"]["references"].values():
        values.update(sample.get(key, []))
    return list(values)

def get_sample_ids():
    return get_unique_values('sample_id')

def get_reference_accession():
    return get_unique_values('assembly_accession')

def get_species_file_prefix():
    return get_unique_values('file_prefixes')

def get_species_long():
    return get_unique_values('species_long')

def get_species():
    return get_unique_values('species')

def get_sex():
    return get_unique_values('sex')

def get_method():
    return get_unique_values('method')

def get_orientation():
    return get_unique_values('orientation')

##### Definition of DICTS
 
SPECIES = ["CG", "CM"]
SEX = ["F", "M"]
METHODS = ["ILLUMINA", "HIFI"]
ORIENTATIONS_PE = ["FWD", "REV"]  # "None" is used for files without orientation like HIFI
ORIENTATIONS_SE = ["None"]  # "None" is used for files without orientation like HIFI
##### load init rules #####

rule all:
    input:
        "paths.sh",
        "logs/logs.txt",
        "logs/file_log.txt",
        "debug_config_output.txt",
        expand("{path_reads_prefix}/CG_F_ILLUMINA_{orientation}_trimmed.fq.gz",
               path_reads_prefix=path_reads_prefix, 
               orientation=ORIENTATIONS_PE),
        expand("{path_reads_prefix}/CM_F_ILLUMINA_{orientation}_trimmed.fq.gz", 
               path_reads_prefix=path_reads_prefix, 
               orientation=ORIENTATIONS_PE),
        expand("{path_reads_prefix}/CM_M_ILLUMINA_{orientation}_trimmed.fq.gz", 
               path_reads_prefix=path_reads_prefix, 
               orientation=ORIENTATIONS_PE)



# Snakefile

# ... [Other parts of your Snakefile] ...

# Rule to write config contents to a file
rule debug_config:
    output:
        debug_config_output="debug_config_output.txt"
    run:
        with open(output.debug_config_output, 'w') as f:
            # Iterate over samples and extract the information
            for species, samples_dict in config['samples'].items():
                for sample_id, sample_info in samples_dict.items():
                    # Write out the details you're interested in
                    f.write(f"Species: {species}, Sample ID: {sample_id}\n")
                    f.write(f"Coverage: {sample_info['coverage']}\n")
                    f.write(f"Description: {sample_info['description']}\n")
                    f.write(f"File Prefix: {sample_info['file_prefix']}\n")
                    f.write(f"Method: {sample_info['method']}\n")
                    f.write(f"Orientation: {sample_info['orientation']}\n")
                    f.write(f"Path Prefix: {sample_info['path_prefix']}\n")
                    f.write(f"Sex: {sample_info['sex']}\n")
                    f.write(f"Species Long: {sample_info['species_long']}\n")
                    f.write("\n")

##### Main rule to orchestrate the workflow #####
rule create_log_folder:
    output:
        log="logs/logs.txt"
    shell:
        "touch {output.log}"

rule export_paths:
    output:
        "paths.sh"
    params:
        path_folder_prefix=path_folder_prefix,  # This assumes path_folder_prefix is a predefined variable
        path_reads_prefix=lambda wc: f"{path_folder_prefix}/00-INPUTS/00-READS",
        path_data_prefix=lambda wc: f"{path_folder_prefix}/00-INPUTS",
        path_prog_prefix=lambda wc: f"{path_folder_prefix}/01-PROGRAMS",
        path_exp_prefix=lambda wc: f"{path_folder_prefix}/02-EXPERIMENTS",
        path_out_prefix=lambda wc: f"{path_folder_prefix}/03-OUTPUTS",
        path_tmp_prefix=lambda wc: f"{path_folder_prefix}/04-TEMPORARY_FILES"
    run:
        with open(str(output), "w") as f:
            f.write(f"export path_reads_prefix='{params.path_reads_prefix}'\n")
            f.write(f"export path_data_prefix='{params.path_data_prefix}'\n")
            f.write(f"export path_prog_prefix='{params.path_prog_prefix}'\n")
            f.write(f"export path_exp_prefix='{params.path_exp_prefix}'\n")
            f.write(f"export path_out_prefix='{params.path_out_prefix}'\n")
            f.write(f"export path_tmp_prefix='{params.path_tmp_prefix}'\n")

rule log_reads_directory:
    input:
        "paths.sh"
    output:
        log="logs/reads_log.txt"
    shell:
        """
        source paths.sh
        echo "Listing .fq, .fastq, .gz, .sam, .bam, .bed, .msh, .fasta, .gfa files in READS directory:" > {output.log}
        find $path_reads_prefix -type f | grep -E '(\.fq|\.fastq|\.sam|\.bam|\.bed|\.msh|\.fasta|\.gfa)$' >> {output.log}
        echo "" >> {output.log}
        """

rule log_data_directory:
    input:
        "paths.sh"
    output:
        log="logs/data_log.txt"
    shell:
        """
        source paths.sh
        echo "Listing .fq, .fastq, .gz, .sam, .bam, .bed, .msh, .fasta, .gfa files in DATA directory:" > {output.log}
        find $path_data_prefix -type f | grep -E '(\.fq|\.fastq|\.sam|\.bam|\.bed|\.msh|\.fasta|\.gfa)$' >> {output.log}
        echo "" >> {output.log}
        """

rule log_experiments_directory:
    output:
        log="logs/experiments_log.txt"
    shell:
        """
        source paths.sh
        echo "Listing .fq, .fastq, .gz, .sam, .bam, .bed, .msh, .fasta, .gfa files in EXPERIMENTS directory:" > {output.log}
        find $path_exp_prefix -type f | grep -E '(\.fq|\.fastq|\.sam|\.bam|\.bed|\.msh|\.fasta|\.gfa)$' >> {output.log}
        echo "" >> {output.log}p
        """

rule log_programs_directory:
    output:
        log="logs/programs_log.txt"
    shell:
        """
        source paths.sh
        echo "Listing .fq, .fastq, .gz, .sam, .bam, .bed, .msh, .fasta, .gfa files in PROGRAMS directory:" > {output.log}
        find path_prog_prefix -type f | grep -E '(\.fq|\.fastq|\.sam|\.bam|\.bed|\.msh|\.fasta|\.gfa)$' >> {output.log}
        echo "" >> {output.log}
        """

rule concatenate_logs:
    input:
        reads="logs/reads_log.txt",
        data="logs/data_log.txt"
        #outputs="logs/outputs_log.txt"
    output:
        log="logs/file_log.txt"
    shell:
        """
        cat {input.reads} {input.data} > {output.log}
        """

##### load rules #####
include: "rules/00-trimming_reads.smk"
#include: "rules/01-quality_control_reads.smk" 