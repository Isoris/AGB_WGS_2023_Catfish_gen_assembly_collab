import subprocess
import os
import sys
import glob
import yaml 


##### load paths #####
current_path=os.getcwd() 
path_folder_prefix=f"{current_path}/../../.."
#path_folder_prefix=f"/tarafs/scratch/proj5034-AGBKU/catfish" # =  ../../..
###
path_reads_prefix=f"{path_folder_prefix}/00-INPUTS/00-READS"
path_data_prefix=f"{path_folder_prefix}/00-INPUTS"
path_prog_prefix=f"{path_folder_prefix}/01-PROGRAMS"
path_exp_prefix=f"{path_folder_prefix}/02-EXPERIMENTS"
path_out_prefix=f"{path_folder_prefix}/03-OUTPUTS"
path_tmp_prefix=f"{path_folder_prefix}/04-TEMPORARY_FILES"  

##### setup config and report #####
report: "report/workflow.rst"
threads = 12
configfile: "config/config.yaml"

##### Definition of functions

def get_unique_values(key):
    values = set()
    for sample in config["samples"].values():
        values.update(sample.get(key, []))
    return list(values)

def get_unique_values_references(key):
    values = set()
    for sample in config["references"]["references"].values():
        values.update(sample.get(key, []))
    return list(values)

def get_sample_ids():
    return get_unique_values('sample_id')

def get_reference_accession():
    return get_unique_values('assembly_accession')

def get_species_file_prefix():
    return get_unique_values('file_prefixes')

def get_species_long():
    return get_unique_values('species_long')

def get_species():
    return get_unique_values('species')

def get_sex():
    return get_unique_values('sex')

def get_method():
    return get_unique_values('method')

def get_orientation():
    return get_unique_values('orientation')

def get_combined_samples():
    species = get_species()
    sex = get_sex()
    method = get_method()
    orientation = get_orientation()
    return ["{}_{}_{}_{}".format(s, sx, m, o) for s in species for sx in sex for m in method for o in orientation]

def get_sample(wildcards): #Get_sample_prefix
    # This function now assumes each sample is a key in the config that 
    # corresponds to a prefix without a file extension
    return f"{wildcards.species}_{wildcards.sex}_{wildcards.method}_{wildcards.orientation}"

##### load init rules #####

rule all:
    input:
        "logs/logs.txt",
        "logs/reads_log.txt",
        "logs/data_log.txt",
        #"logs/programs_log.txt",
        #"logs/experiments_log.txt",
        "logs/outputs_log.txt",
        #"logs/temporary_log.txt",
        "logs/file_log.txt",
        #expand(f"{path_out_prefix}/00-MASH/{{sample}}_combined.tbl", path_out_prefix=path_out_prefix, sample=get_combined_samples()),
        #expand(f"{path_out_prefix}/00-MASH/{{sample}}_screen.out", path_out_prefix=path_out_prefix, sample=get_combined_samples()),
        #expand(f"{path_out_prefix}/00-MASH/{{sample}}_mash_plot.png", path_out_prefix=path_out_prefix, sample=get_combined_samples())
        # Uncomment the following lines when you want to include them in the execution
        # expand("{path_out_prefix}/00-JELLYFISH/{sample}_jellyfishcount.jf", sample=get_combined_samples()),
        # expand("{path_out_prefix}/00-JELLYFISH/{sample}_jellyfish_histo.histo", sample=get_combined_samples()),
        # expand("{path_out_prefix}/00-GENOMESCOPE/{sample}_plot.png", sample=get_combined_samples())
        # Add additional lines for other output files as needed

##### Main rule to orchestrate the workflow #####

rule create_log_folder:
    output:
        log="logs/logs.txt"
    shell:
        "touch {output.log}"

rule log_reads_directory:
    output:
        log="logs/reads_log.txt"
    shell:
        """
        echo "Listing .fq, .fastq, .gz, .sam, .bam, .bed, .msh, .fasta, .gfa files in READS directory:" > {output.log}
        find {path_reads_prefix} -type f | grep -E '(\.fq|\.fastq|\.sam|\.bam|\.bed|\.msh|\.fasta|\.gfa)$' >> {output.log}
        echo "" >> {output.log}
        """

rule log_data_directory:
    output:
        log="logs/data_log.txt"
    shell:
        """
        echo "Listing .fq, .fastq, .gz, .sam, .bam, .bed, .msh, .fasta, .gfa files in DATA directory:" > {output.log}
        find {path_data_prefix} -type f | grep -E '(\.fq|\.fastq|\.sam|\.bam|\.bed|\.msh|\.fasta|\.gfa)$' >> {output.log}
        echo "" >> {output.log}
        """

rule log_programs_directory:
    output:
        log="logs/programs_log.txt"
    shell:
        """
        echo "Listing .fq, .fastq, .gz, .sam, .bam, .bed, .msh, .fasta, .gfa files in PROGRAMS directory:" > {output.log}
        find {path_prog_prefix} -type f | grep -E '(\.fq|\.fastq|\.sam|\.bam|\.bed|\.msh|\.fasta|\.gfa)$' >> {output.log}
        echo "" >> {output.log}
        """

rule log_experiments_directory:
    output:
        log="logs/experiments_log.txt"
    shell:
        """
        echo "Listing .fq, .fastq, .gz, .sam, .bam, .bed, .msh, .fasta, .gfa files in EXPERIMENTS directory:" > {output.log}
        find {path_exp_prefix} -type f | grep -E '(\.fq|\.fastq|\.sam|\.bam|\.bed|\.msh|\.fasta|\.gfa)$' >> {output.log}
        echo "" >> {output.log}
        """

rule log_outputs_directory:
    output:
        log="logs/outputs_log.txt"
    shell:
        """
        echo "Listing .fq, .fastq, .gz, .sam, .bam, .bed, .msh, .fasta, .gfa files in OUTPUTS directory:" > {output.log}
        find {path_out_prefix} -type f | grep -E '(\.fq|\.fastq|\.sam|\.bam|\.bed|\.msh|\.fasta|\.gfa)$' >> {output.log}
        echo "" >> {output.log}
        """

rule log_temporary_directory:
    output:
        log="logs/temporary_log.txt"
    shell:
        """
        echo "Listing .fq, .fastq, .gz, .sam, .bam, .bed, .msh, .fasta, .gfa files in TEMPORARY directory:" > {output.log}
        find {path_tmp_prefix} -type f | grep -E '(\.fq|\.fastq|\.sam|\.bam|\.bed|\.msh|\.fasta|\.gfa)$' >> {output.log}
        echo "" >> {output.log}
        """

rule concatenate_logs:
    input:
        reads="logs/reads_log.txt",
        data="logs/data_log.txt",
        #programs="logs/programs_log.txt",
        experiments="logs/experiments_log.txt",
        outputs="logs/outputs_log.txt",
        #temporary="logs/temporary_log.txt"
    output:
        log="logs/file_log.txt"
    shell:
        """
        cat {input.reads} {input.data} {input.programs} {input.experiments} {input.outputs} {input.temporary} > {output.log}
        """
#find . -type f -print0 | grep -E '\\.(fq|fastq|gz|sam|bam|bed|msh|fasta|gfa)$' >> {output.log}

##### load rules #####
#include: "rules/plots.smk"
#include: "rules/reference.smk"
##
include: "rules/quality_control_reads.smk"


#include: "rules/quality_control_reads_jellyfish.smk"
#include: "rules/quality_control_assembly.smk" 
#include: "rules/trimming.smk"
#include: "rules/denovo.smk"

#include: "rules/mapping_illumina.smk"
#include: "rules/variant_calling.smk"

#include: "rules/pangenomes_plots.smk"

#include: "rules/mitoVGP_conda_env_ONT.smk"
#include: "rules/mitoVG_conda_env_pacbio.smk"


#include: "rules/annotations.smk"
#include: "rules/pangenomes_annotations.smk"



# End
