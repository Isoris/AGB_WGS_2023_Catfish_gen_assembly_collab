import subprocess
import os
import sys
import glob
import yaml
import re 
from snakemake.io import expand
from snakemake.io import Wildcards

#nohup snakemake --use-conda --conda-frontend mamba 
#  --cluster "sbatch -A proj5034 -t 24:00:00 -p compute -J snakemake_quentin -n 1 -c 24" 
#--jobs 100 --rerun-incomplete > nohup.snakemake.cluster.slurm.log &

##### load paths #####
current_path=os.getcwd() 
path_folder_prefix=f"{current_path}/../../.."   # path_folder_prefix=f"/tarafs/scratch/proj5034-AGBKU/catfish" # =  ../../..
##### load specific paths #####
path_reads_prefix=f"{path_folder_prefix}/00-INPUTS/00-READS"
path_data_prefix=f"{path_folder_prefix}/00-INPUTS"
path_prog_prefix=f"{path_folder_prefix}/01-PROGRAMS"
path_exp_prefix=f"{path_folder_prefix}/02-EXPERIMENTS"
path_out_prefix=f"{path_folder_prefix}/03-OUTPUTS"
path_tmp_prefix=f"{path_folder_prefix}/04-TEMPORARY_FILES"  

##### setup config and report #####
threads = 12
configfile: f"{current_path}/config/config.yaml" #report: "report/workflow.rst"

##### Definition of functions
include: "rules/fcts.smk"




##### Definition of DICTS
 
SPECIES = ["CG", "CM"]
SEX = ["F", "M"]
METHODS = ["ILLUMINA", "HIFI"]
ORIENTATIONS_PE = ["FWD", "REV"]  # "None" is used for files without orientation like HIFI
ORIENTATIONS_SE = ["None"]  # "None" is used for files without orientation like HIFI
SAMPLES_ILLUMINA= ["CM_M", "CM_F", "CG_F", "CG_M"]
SAMPLES_ONT = ["CM_M", "CG_F"]
SAMPLES_HIC = ["CM_M", "CG_F"]
SAMPLES_HIFI = ["CM_M", "CG_F"]

REFERENCES_GENOMES_SPECIES = [""]
REFERENCES_GENOMES_GENERA = [""]
BWT_IDX = [""]
TREEFILES = [""]

rule all:
    input:
        "paths.sh",
        "logs/logs.txt",
        "logs/file_log.txt",
        "debug_config_output.txt",

        # FASTQC ILLUM READS
        expand("{path_out_prefix}/00-FASTQC/{sample}_ILLUMINA_{orientation_pe}/{sample}_ILLUMINA_{orientation_pe}_{ext}",
               path_out_prefix=path_out_prefix,
               path_reads_prefix=path_reads_prefix, 
               sample=SAMPLES_ILLUMINA,
               ext=["fastqc.html", "fastqc.zip"],
               orientation_pe=ORIENTATIONS_PE),

        # ADAPTERREMOVAL
        expand("{path_reads_prefix}/{sample}_ILLUMINA_{orientation_pe}_trimmed_reads.fastq.gz",
               path_reads_prefix=path_reads_prefix, 
               sample=SAMPLES_ILLUMINA,
               orientation_pe=ORIENTATIONS_PE),

        # FASTQC ILLUM TRIMMED READS
        expand("{path_out_prefix}/00-FASTQC/{sample}_ILLUMINA_{orientation_pe}_trim/{sample}_ILLUMINA_{orientation_pe}_trimmed_reads_{ext}",
               path_out_prefix=path_out_prefix, 
               path_reads_prefix=path_reads_prefix,
               sample=SAMPLES_ILLUMINA,
               ext=["fastqc.html", "fastqc.zip"],
               orientation_pe=ORIENTATIONS_PE),

        # PROCESS HIFI READS
        expand("{path_reads_prefix}/{sample}_HIFI_None_trimmed_reads.fastq.gz",
               path_reads_prefix=path_reads_prefix,
               sample=SAMPLES_HIFI),

        # LONGQC HIFI READS
        expand("{path_out_prefix}/00-LONGQC/{sample}_HIFI/",
               path_out_prefix=path_out_prefix, 
               sample=SAMPLES_HIFI),

        # MASH FOR READ CONTAMINATION
        expand("{path_out_prefix}/01-MASH/{sample}_HIFI_None_mash_plot.png",
               path_out_prefix=path_out_prefix,
               sample=SAMPLES_HIFI),

        # JELLYFISH AND GENOMESCOPE FOR HIFI DATASET
        expand("{path_out_prefix}/01-JELLYFISH/{sample}_HIFI/{sample}_HIFI_None_trimmed_reads_jellyfish_count.jf",
               path_out_prefix=path_out_prefix, 
               sample=SAMPLES_HIFI),
        expand("{path_out_prefix}/01-JELLYFISH/{sample}_HIFI/{sample}_HIFI_None_trimmed_reads_jellyfish_histo.histo",
               path_out_prefix=path_out_prefix, 
               sample=SAMPLES_HIFI),
        expand("{path_out_prefix}/01-GENOMESCOPE/{sample}_HIFI/",
               path_out_prefix=path_out_prefix, 
               sample=SAMPLES_HIFI),

        # Expand for nanoQC on ONT reads
        expand("{path_out_prefix}/00-NANOQC/{sample}_NANOPORE/",           
               path_out_prefix=path_out_prefix, 
               sample=SAMPLES_ONT),

        # Expand for filtlong on ONT reads
        expand("{path_reads_prefix}/{sample}_NANOPORE_None_trimmed_reads.fastq.gz",
               path_reads_prefix=path_reads_prefix, 
               sample=SAMPLES_ONT),


        ####### HIFASM FOR GENOME ASSEMBLY
        # Outputs from 'run_hifasm_hifi_UL_hic' and 'gfa_to_fasta_after_hifasm'
        expand("{path_reads_prefix}/{sample}.p_ctg.fa",
               path_reads_prefix=path_reads_prefix,
               sample=["CM_M", "CG_F"]),
        expand("{path_reads_prefix}/{sample}.a_ctg.fa",
               path_reads_prefix=path_reads_prefix,
               sample=["CM_M", "CG_F"]),
        expand("{path_reads_prefix}/{sample}.hap1.p_ctg.fa",
               path_reads_prefix=path_reads_prefix,
               sample=["CM_M", "CG_F"]),
        expand("{path_reads_prefix}/{sample}.hap2.p_ctg.fa",
               path_reads_prefix=path_reads_prefix,
               sample=["CM_M", "CG_F"])

        # Outputs from 'read_genomescope_summary_illum_out' and 'read_genomescope_summary_hifi_out'
#        expand("{path_out_prefix}/01-GENOMESCOPE/{sample}_ILLUMINA/{sample}_haploid_length.txt",
#               path_out_prefix=path_out_prefix,
#               sample=["CM_M", "CG_F"]),
#        expand("{path_out_prefix}/01-GENOMESCOPE/{sample}_HIFI/{sample}_haploid_length.txt",
#               path_out_prefix=path_out_prefix,
#               sample=["CM_M", "CG_F"]),

        # Output from 'meryl_build_db'
#        expand("{path_out_prefix}/03-MERYLMERCURY/{sample}_meryl_db",
#               path_out_prefix=path_out_prefix,
#               sample=["CM_M", "CG_F"])




##### load rules #####
include: "rules/00-logs.smk"
include: "rules/00-trimming_reads.smk"
include: "rules/01-quality_control_reads.smk" 
include: "rules/02-denovo.smk"
include: "rules/03-quality_control_assembly.smk"

